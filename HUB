
PART 1

Absolutely! Here’s a detailed and clear summary in English, covering the steps to generate reports using Python and send them via email, including how to integrate this with Eggplant Functional.

Generating Reports and Sending Emails with Python: A Detailed Approach

In this project, we want to automate the process of running multiple test cases in Eggplant Functional, collect test results, generate a formatted report, and send this report as an email attachment — all without using SMTP servers like the Eggplant DAI agent. Below is a step-by-step explanation of how this can be achieved using Python.

1. Collecting Test Results from Eggplant Functional

The first step is to capture test results from Eggplant Functional. These test results, including whether each test step passed or failed, can be stored in a CSV file for further processing. Here’s an example of how you can write test results to a CSV file in Eggplant:

put "Test Step, Status" into file "test_results.csv"

repeat with each item of myTestSteps
    if StepSucceeded then
        put it & ", Passed" after file "test_results.csv"
    else
        put it & ", Failed" after file "test_results.csv"
    end if
end repeat

This code saves the results of each test step into a CSV file, which will later be used to generate a report.

2. Generating HTML Reports from CSV in Python

Once you have your CSV file with test results, you can use Python to read this file and generate a well-formatted HTML report. HTML reports are a great format for sharing via email as they are easy to style and make results clear.

Here’s an example Python script that reads the CSV file and converts it into an HTML report using Jinja2, a popular templating engine:

import csv
from jinja2 import Template

# Function to read test results from a CSV file
def read_test_results(csv_file):
    test_results = []
    with open(csv_file, newline='') as file:
        reader = csv.DictReader(file)
        for row in reader:
            test_results.append(row)
    return test_results

# Define an HTML template for the report
html_template = """
<!DOCTYPE html>
<html>
<head>
    <title>Test Results</title>
    <style>
        table {
            font-family: Arial, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h2>Test Results Summary</h2>
    <table>
        <tr>
            <th>Test Step</th>
            <th>Status</th>
        </tr>
        {% for result in test_results %}
        <tr>
            <td>{{ result['Test Step'] }}</td>
            <td>{{ result['Status'] }}</td>
        </tr>
        {% endfor %}
    </table>
</body>
</html>
"""

# Function to generate HTML report using the template
def generate_html_report(test_results):
    template = Template(html_template)
    return template.render(test_results=test_results)

# Read the CSV file and generate the HTML report
test_results = read_test_results("test_results.csv")
html_report = generate_html_report(test_results)

# Save the HTML report to a file
with open("test_report.html", "w") as report_file:
    report_file.write(html_report)

3. Sending the HTML Report as an Email Attachment

After generating the HTML report, the next step is to send it via email. Since you mentioned that there’s no SMTP server available, you can use Gmail’s SMTP or any other available service. Here’s how to send the HTML report as an email attachment using Python.

This Python script will send the email using Gmail’s SMTP server:

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication

# Function to send an email with the HTML report attached
def send_email_with_report(to_email, subject, body, report_path):
    # Gmail SMTP server details
    from_email = "your_email@gmail.com"
    from_password = "your_password"

    # Create the email message
    msg = MIMEMultipart()
    msg['From'] = from_email
    msg['To'] = to_email
    msg['Subject'] = subject

    # Add the email body text
    msg.attach(MIMEText(body, 'plain'))

    # Attach the HTML report
    with open(report_path, "rb") as file:
        part = MIMEApplication(file.read(), Name="test_report.html")
    part['Content-Disposition'] = f'attachment; filename="test_report.html"'
    msg.attach(part)

    # Send the email via Gmail's SMTP server
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()
    server.login(from_email, from_password)
    server.send_message(msg)
    server.quit()

# Send the email
send_email_with_report(
    to_email="recipient@example.com",
    subject="Test Results",
    body="Attached is the test results report.",
    report_path="test_report.html"
)

Important Notes:

	•	If using Gmail, you may need to enable “Less secure app access” in your Gmail account to allow SMTP access.
	•	You can modify this code to use different email services if needed (like Outlook, Yahoo, etc.).

4. Integrating Python with Eggplant Functional

Now, we need to integrate the Python reporting process into your Eggplant Functional test execution. Once the tests are done, you can automatically trigger the Python script to generate the report and send the email.

In Eggplant Functional, you can use the Shell() function to call the Python script:

// Run the Python script to generate and send the report
Shell("python3 send_test_report.py")

This will ensure that after your Eggplant tests complete, the Python script runs, generates the report, and sends it via email.

Summary

Here’s a step-by-step summary of the process:

	1.	Collect Test Results: While running your tests in Eggplant Functional, log each test step and its result into a CSV file.
	2.	Generate HTML Report: Use Python and the Jinja2 templating engine to read the CSV file and generate a well-formatted HTML report.
	3.	Send Report via Email: Send the generated HTML report as an attachment using Python’s smtplib module. You can use Gmail’s SMTP or another email service.
	4.	Eggplant Integration: Use the Shell() command in Eggplant Functional to trigger the Python script automatically once the tests are complete.


PART 2

Jinja2 HTML Template (Based on Your Image)

from jinja2 import Template

# HTML Template based on your structure
html_template = """
<!DOCTYPE html>
<html>
<head>
    <title>Test Execution Report</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f9f9f9;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            padding: 10px;
            border: 1px solid black;
        }
        th {
            background-color: #4CAF50;
            color: white;
        }
        td {
            text-align: center;
        }
        .failed {
            color: red;
        }
        .passed {
            color: green;
        }
    </style>
</head>
<body>
    <h1>Test Execution Report</h1>
    
    <h2>Module Summary</h2>
    <table>
        <thead>
            <tr>
                <th>Module</th>
                <th>Passed</th>
                <th>Failed</th>
                <th>Total</th>
                <th>Duration</th>
            </tr>
        </thead>
        <tbody>
            {% for module in module_summary %}
            <tr>
                <td>{{ module['name'] }}</td>
                <td>{{ module['passed'] }}</td>
                <td class="{{ 'failed' if module['failed'] > 0 else 'passed' }}">{{ module['failed'] }}</td>
                <td>{{ module['total'] }}</td>
                <td>{{ module['duration'] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <h2>High-Level Details of the Execution</h2>
    <table>
        <thead>
            <tr>
                <th>TC#</th>
                <th>Test Case Name</th>
                <th>Module</th>
                <th>Test Case Type</th>
                <th>Test Case Duration</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            {% for test in test_cases %}
            <tr>
                <td>{{ test['tc_number'] }}</td>
                <td>{{ test['test_case_name'] }}</td>
                <td>{{ test['module'] }}</td>
                <td>{{ test['test_case_type'] }}</td>
                <td>{{ test['duration'] }}</td>
                <td class="{{ 'failed' if test['status'] == 'Failed' else 'passed' }}">{{ test['status'] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>
"""

# This template will dynamically fill in the "Module Summary" and "High-Level Details of the Execution" sections

Breakdown of the Template:

	1.	Module Summary Table:
	•	Columns: Module, Passed, Failed, Total, Duration
	•	Each module’s results (e.g., Recipient Module, Employer Module, etc.) will be dynamically inserted using {% for module in module_summary %}.
	2.	High-Level Details Table:
	•	Columns: TC# (Test Case Number), Test Case Name, Module, Test Case Type, Test Case Duration, Status
	•	Each test case’s details (e.g., Test Case Name, Duration, Status) will be dynamically inserted using {% for test in test_cases %}.

3. Python Code to Render the Template with Data

Once you have the template, you will need Python to load the test data (from your CSV or directly from Eggplant) and render it in the HTML report.

Here’s the full Python code to generate the report:

import csv
from jinja2 import Template

# Function to read test results from CSV file
def read_test_results(csv_file):
    test_cases = []
    module_summary = {}
    
    with open(csv_file, newline='') as file:
        reader = csv.DictReader(file)
        for row in reader:
            test_cases.append({
                'tc_number': row['TC#'],
                'test_case_name': row['Test Case Name'],
                'module': row['Module'],
                'test_case_type': row['Test Case Type'],
                'duration': row['Test Case Duration'],
                'status': row['Status']
            })
            
            # Update module summary
            module = row['Module']
            if module not in module_summary:
                module_summary[module] = {'name': module, 'passed': 0, 'failed': 0, 'total': 0, 'duration': 0.0}
            module_summary[module]['total'] += 1
            if row['Status'] == 'Passed':
                module_summary[module]['passed'] += 1
            else:
                module_summary[module]['failed'] += 1
            module_summary[module]['duration'] += float(row['Test Case Duration'].replace('h', '').replace('m', '').replace('s', ''))  # Convert to float
    
    # Convert dictionary to list for template rendering
    module_summary_list = []
    for key, value in module_summary.items():
        value['duration'] = f"{int(value['duration'] // 60)}h {int(value['duration'] % 60)}m"
        module_summary_list.append(value)
    
    return test_cases, module_summary_list

# Read test data and generate HTML report using Jinja2
def generate_html_report(csv_file):
    # Load the template
    template = Template(html_template)

    # Read the test cases and module summaries
    test_cases, module_summary = read_test_results(csv_file)

    # Generate the HTML report
    html_report = template.render(test_cases=test_cases, module_summary=module_summary)
    
    # Save the report to a file
    with open("test_report.html", "w") as report_file:
        report_file.write(html_report)

# Call the function to generate the report from a CSV file
generate_html_report("test_results.csv")

Explanation:

	•	read_test_results(): Reads the test data from the CSV file. It creates a list of test cases and also calculates the summary for each module (total tests, passed, failed, total duration).
	•	generate_html_report(): Uses Jinja2 to render the HTML report with the test data.
	•	The final report is saved as an HTML file (test_report.html).

4. Sample CSV File Format

Make sure your CSV file is formatted correctly with headers matching the keys used in the Python code:

TC#,Test Case Name,Module,Test Case Type,Test Case Duration,Status
1,Login Test,Recipient Module,Functional,0h 1m,Passed
2,Payment Processing,Recipient Module,Functional,0h 2m,Failed
3,Employee Registration,Employer Module,Functional,0h 3m,Passed
...

5. Integrating with Eggplant Functional

In Eggplant Functional, after the test execution finishes, you can run this Python script using the Shell() function:

// After tests complete, call the Python script to generate the report
Shell("python3 generate_test_report.py")

This will trigger the Python script, which will read the results, generate the HTML report, and save it as test_report.html.

Summary:

	•	Module Summary: Shows the test results for each module, including passed, failed, total tests, and duration.
	•	High-Level Execution Details: Displays detailed results for each test case, including TC#, test case name, module, test case type, duration, and status.
	•	Python and Jinja2: Python reads the test data from a CSV file, processes the data, and renders the HTML using Jinja2.
	•	Eggplant Integration: Once the tests are finished, the Python script will be called to generate and save the report.