Absolutely! Here’s a detailed and clear summary in English, covering the steps to generate reports using Python and send them via email, including how to integrate this with Eggplant Functional.

Generating Reports and Sending Emails with Python: A Detailed Approach

In this project, we want to automate the process of running multiple test cases in Eggplant Functional, collect test results, generate a formatted report, and send this report as an email attachment — all without using SMTP servers like the Eggplant DAI agent. Below is a step-by-step explanation of how this can be achieved using Python.

1. Collecting Test Results from Eggplant Functional

The first step is to capture test results from Eggplant Functional. These test results, including whether each test step passed or failed, can be stored in a CSV file for further processing. Here’s an example of how you can write test results to a CSV file in Eggplant:

put "Test Step, Status" into file "test_results.csv"

repeat with each item of myTestSteps
    if StepSucceeded then
        put it & ", Passed" after file "test_results.csv"
    else
        put it & ", Failed" after file "test_results.csv"
    end if
end repeat

This code saves the results of each test step into a CSV file, which will later be used to generate a report.

2. Generating HTML Reports from CSV in Python

Once you have your CSV file with test results, you can use Python to read this file and generate a well-formatted HTML report. HTML reports are a great format for sharing via email as they are easy to style and make results clear.

Here’s an example Python script that reads the CSV file and converts it into an HTML report using Jinja2, a popular templating engine:

import csv
from jinja2 import Template

# Function to read test results from a CSV file
def read_test_results(csv_file):
    test_results = []
    with open(csv_file, newline='') as file:
        reader = csv.DictReader(file)
        for row in reader:
            test_results.append(row)
    return test_results

# Define an HTML template for the report
html_template = """
<!DOCTYPE html>
<html>
<head>
    <title>Test Results</title>
    <style>
        table {
            font-family: Arial, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h2>Test Results Summary</h2>
    <table>
        <tr>
            <th>Test Step</th>
            <th>Status</th>
        </tr>
        {% for result in test_results %}
        <tr>
            <td>{{ result['Test Step'] }}</td>
            <td>{{ result['Status'] }}</td>
        </tr>
        {% endfor %}
    </table>
</body>
</html>
"""

# Function to generate HTML report using the template
def generate_html_report(test_results):
    template = Template(html_template)
    return template.render(test_results=test_results)

# Read the CSV file and generate the HTML report
test_results = read_test_results("test_results.csv")
html_report = generate_html_report(test_results)

# Save the HTML report to a file
with open("test_report.html", "w") as report_file:
    report_file.write(html_report)

3. Sending the HTML Report as an Email Attachment

After generating the HTML report, the next step is to send it via email. Since you mentioned that there’s no SMTP server available, you can use Gmail’s SMTP or any other available service. Here’s how to send the HTML report as an email attachment using Python.

This Python script will send the email using Gmail’s SMTP server:

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication

# Function to send an email with the HTML report attached
def send_email_with_report(to_email, subject, body, report_path):
    # Gmail SMTP server details
    from_email = "your_email@gmail.com"
    from_password = "your_password"

    # Create the email message
    msg = MIMEMultipart()
    msg['From'] = from_email
    msg['To'] = to_email
    msg['Subject'] = subject

    # Add the email body text
    msg.attach(MIMEText(body, 'plain'))

    # Attach the HTML report
    with open(report_path, "rb") as file:
        part = MIMEApplication(file.read(), Name="test_report.html")
    part['Content-Disposition'] = f'attachment; filename="test_report.html"'
    msg.attach(part)

    # Send the email via Gmail's SMTP server
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()
    server.login(from_email, from_password)
    server.send_message(msg)
    server.quit()

# Send the email
send_email_with_report(
    to_email="recipient@example.com",
    subject="Test Results",
    body="Attached is the test results report.",
    report_path="test_report.html"
)

Important Notes:

	•	If using Gmail, you may need to enable “Less secure app access” in your Gmail account to allow SMTP access.
	•	You can modify this code to use different email services if needed (like Outlook, Yahoo, etc.).

4. Integrating Python with Eggplant Functional

Now, we need to integrate the Python reporting process into your Eggplant Functional test execution. Once the tests are done, you can automatically trigger the Python script to generate the report and send the email.

In Eggplant Functional, you can use the Shell() function to call the Python script:

// Run the Python script to generate and send the report
Shell("python3 send_test_report.py")

This will ensure that after your Eggplant tests complete, the Python script runs, generates the report, and sends it via email.

Summary

Here’s a step-by-step summary of the process:

	1.	Collect Test Results: While running your tests in Eggplant Functional, log each test step and its result into a CSV file.
	2.	Generate HTML Report: Use Python and the Jinja2 templating engine to read the CSV file and generate a well-formatted HTML report.
	3.	Send Report via Email: Send the generated HTML report as an attachment using Python’s smtplib module. You can use Gmail’s SMTP or another email service.
	4.	Eggplant Integration: Use the Shell() command in Eggplant Functional to trigger the Python script automatically once the tests are complete.

This approach will allow you to automate both the report generation and email sending without relying on an external SMTP server. You can also customize the HTML template and email content as needed.

Let me know if you need more clarification or details for your meeting!